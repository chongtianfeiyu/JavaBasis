1，什么是反射？
	Java反射机制是在运行状态中，对于任意一个类的字节码文件(.class文件)，都能够知道这个类的所有属性和方法；
	对于任意一个对象，都能够调用它的任意一个方法和属性；
	这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。

	动态获取类中信息，就是Java反射，可以理解为对类的解剖

2，如何获取字节码文件对象？
	1，通过Object类中的getClass()方法【继承自Object类】
	想要使用这种方式，必须要明确具体的类，并创建其对象【麻烦】。
	
	2，任何数据类型都具备一个静态的属性.class来获取其对应的Class对象【该属性由JVM自动构建】；
	想要使用这种方式，必须也必须要明确用到具体的类静态成员【相对简单，但还是不够扩展】。
	
	3，只要通过给定的类的字符串名称就可以获取该类的Class对象【更为扩展】；
	可以使用java.lang.Class类中的方法完成。
	
3，通过new关键字创建对象与使用反射创建对象有什么区别？
	1，new com.xxx.ClassA obj = new com.xxx.ClassA();
	----1)，先根据被new的类的名称寻找该类对应的字节码文件(.class文件)，并加载进内存;
	----2)，再创建该字节码文件对象(Class对象实例);
	----3)，最后创建该字节码文件对应的ClassA对象；
	
	2，Class.forName("com.xxx.ClassA").newInstance();
	----1)，先根据类的完全限定名寻找对应的.class文件，并加载进内存;
	----2)，然后产生对应的Class对象；
	----3)，调用newInstance()方法生成对应的对象实例;【该方法就是调用ClassA类中的一个默认的构造函数】
	
4，使用反射调用有参数的构造函数来初始化对象？
	1，先获取到该构造函数对象【java.lang.reflect.Constructor对象-描述一个构造函数】;
	----1)，通过Class对象的getConstructor(Class<?>... parameterTypes)获取指定参数的构造函数;
	
	2，通过对应的构造器对象完成对象初始化;
	----1)，通过Constructor对象的newInstance(Object... initargs)完成初始化工作;
	
5，Java反射API中的一些规律:
	1，凡是getXXX()命名的方法只能拿共有public的成员变量，成员方法；
	
	2，凡是getDeclaredXXX()命名的方法可以拿所有的成员变量，成员方法；
	
	3，拿到了Filed，Method这些对象之后，必须明确为其指定一个实例，才能做字段的取值/设置，方法的调用，因为只有对象才能访问类中的成员。
	
	4，在设置/获取Filed的值的时候，注意权限检查，可以使用【父类java.lang.reflect.AccessibleObject对象的setAccessible(true)方法来暴力访问】，不建议使用